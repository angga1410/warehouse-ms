{
  "_args": [
    [
      {
        "raw": "fs-utils@https://registry.npmjs.org/fs-utils/-/fs-utils-0.5.0.tgz",
        "scope": null,
        "escapedName": "fs-utils",
        "name": "fs-utils",
        "rawSpec": "https://registry.npmjs.org/fs-utils/-/fs-utils-0.5.0.tgz",
        "spec": "https://registry.npmjs.org/fs-utils/-/fs-utils-0.5.0.tgz",
        "type": "remote"
      },
      "F:\\All Projects\\new projects\\warehouse\\node_modules\\ajax-bootstrap-select"
    ]
  ],
  "_from": "fs-utils@https://registry.npmjs.org/fs-utils/-/fs-utils-0.5.0.tgz",
  "_id": "fs-utils@0.5.0",
  "_inCache": true,
  "_location": "/ajax-bootstrap-select/marked-toc/fs-utils",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fs-utils@https://registry.npmjs.org/fs-utils/-/fs-utils-0.5.0.tgz",
    "scope": null,
    "escapedName": "fs-utils",
    "name": "fs-utils",
    "rawSpec": "https://registry.npmjs.org/fs-utils/-/fs-utils-0.5.0.tgz",
    "spec": "https://registry.npmjs.org/fs-utils/-/fs-utils-0.5.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/ajax-bootstrap-select/marked-toc"
  ],
  "_resolved": "https://registry.npmjs.org/fs-utils/-/fs-utils-0.5.0.tgz",
  "_shasum": "171bb985501ec9bcb662bf62c9916c9aadeace24",
  "_shrinkwrap": null,
  "_spec": "fs-utils@https://registry.npmjs.org/fs-utils/-/fs-utils-0.5.0.tgz",
  "_where": "F:\\All Projects\\new projects\\warehouse\\node_modules\\ajax-bootstrap-select",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/assemble"
  },
  "bugs": {
    "url": "https://github.com/assemble/fs-utils/issues"
  },
  "dependencies": {
    "async": "^0.9.0",
    "delete": "^0.1.5",
    "extend-shallow": "^0.1.0",
    "globby": "^0.1.1",
    "graceful-fs": "^3.0.2",
    "is-absolute": "^0.1.5",
    "js-yaml": "^3.2.2",
    "kind-of": "^0.1.0",
    "relative": "^0.1.6"
  },
  "description": "fs extras and utilities to extend the node.js file system module. Used in Assemble and many other projects.",
  "devDependencies": {
    "mocha": "*",
    "should": "^4.0.4",
    "verb": ">= 0.2.6",
    "verb-tag-jscomments": ">= 0.2.0"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "homepage": "https://github.com/assemble/fs-utils",
  "keywords": [
    "file system",
    "file",
    "read",
    "readFile",
    "readFileSync",
    "fs",
    "node",
    "node.js",
    "path",
    "utils"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/assemble/fs-utils/blob/master/LICENSE-MIT"
    }
  ],
  "main": "index.js",
  "name": "fs-utils",
  "optionalDependencies": {},
  "readme": "# fs-utils [![NPM version](https://badge.fury.io/js/fs-utils.svg)](http://badge.fury.io/js/fs-utils)\n\n\n> fs extras and utilities to extend the node.js file system module. Used in Assemble and many other projects.\n\n## Install\n#### Install with [npm](npmjs.org):\n\n```bash\nnpm i fs-utils --save-dev\n```\n\n## Run tests\n\n```bash\nnpm test\n```\n\n## Usage\n\n```js\nvar fs = require('fs-utils');\n```\n\n## API\n### [.stripcr](index.js#L31)\n\n* `str` **{String}**    \n* `returns`: {String}  \n\nStrip carriage returns from a string.\n\n### [.stripBOM](index.js#L45)\n\nStrip byte order marks from a string.\n\n* `str` **{String}**    \n* `returns`: {String}  \n\nSee [BOM](http://en.wikipedia.org/wiki/Byte_order_mark)\n\n### [.forwardSlash](index.js#L57)\n\n* `str` **{String}**    \n* `returns`: {String}  \n\nNormalize all slashes to forward slashes.\n\n### [.isEmpty](index.js#L98)\n\n* `filepath` **{String}**    \n* `returns`: {Boolean}  \n\nReturn `true` if the file exists and is empty.\n\n### [.isDir](index.js#L114)\n\n* `filepath` **{String}**    \n* `returns`: {Boolean}  \n\nReturn `true` if the filepath is a directory.\n\n### [.isLink](index.js#L145)\n\n* `filepath` **{String}**    \n* `returns`: {Boolean}  \n\nTrue if the filepath is a symbolic link.\n\n### [.glob](index.js#L159)\n\n* `patterns` **{String|Array}**    \n* `returns`: {options}  \n\nGlob files using [globby]. Or glob files synchronously\nwith `glob.sync`.\n\n### [.readFileSync](index.js#L170)\n\n* `filepath` **{String}**    \n* `returns`: {String}  \n\nRead a file synchronously. Also strips any byte order\nmarks.\n\n### [readFile](index.js#L190)\n\n* `filepath` **{String}**    \n* `options` **{Object}**    \n* `normalize` **{Boolean}**: Strip carriage returns and BOM.    \n* `encoding` **{String}**: Default is `utf8`    \n* `callback` **{Function}**    \n\nRead a file asynchronously.\n\n### [.readJSONSync](index.js#L221)\n\n* `filepath` **{String}**    \n* `returns`: {Object}  \n\nRead a file synchronously and parse contents as JSON.\nmarks.\n\n### [.readJSON](index.js#L234)\n\n* `filepath` **{String}**    \n* `callback` **{Function}**    \n* `returns`: {Object}  \n\nRead JSON file asynchronously and parse content as JSON\n\n### [.readYAMLSync](index.js#L252)\n\n* `filepath` **{String}**    \n* `returns`: {Object}  \n\nRead a YAML file synchronously and parse its content as JSON\n\n### [.readYAML](index.js#L264)\n\n* `filepath` **{String}**    \n* `returns`: {Object}  \n\nRead a YAML file synchronously and parse its content as JSON\n\n### [.readDataSync](index.js#L296)\n\n* `filepath` **{String}**    \n* `options` **{String}**    \n* `returns`: {String}  \n\nRead JSON or YAML. Determins the reader automatically\nbased on file extension.\n\n### [.readData](index.js#L327)\n\n* `filepath` **{String}**    \n* `options` **{String}**    \n* `returns`: {String}  \n\nRead JSON or YAML async. Determins the reader automatically\nbased on file extension.\n\n### [.writeFile](index.js#L388)\n\n\nWrite\n\n### [.writeFileSync](index.js#L415)\n\n* `dest` **{String}**    \n* `str` **{String}**    \n* `options` **{Options}**    \n\nSynchronously write files to disk, creating any\nintermediary directories if they don't exist.\n\n### [.writeJSONSync](index.js#L435)\n\n* `dest` **{String}**    \n* `str` **{String}**    \n* `options` **{Options}**    \n\nSynchronously write JSON to disk, creating any\nintermediary directories if they don't exist.\n\n### [.writeJSON](index.js#L451)\n\n* `dest` **{String}**    \n* `str` **{String}**    \n* `options` **{Options}**    \n\nAsynchronously write files to disk, creating any\nintermediary directories if they don't exist.\n\n### [.writeYAMLSync](index.js#L472)\n\n* `dest` **{String}**    \n* `str` **{String}**    \n* `options` **{Options}**    \n\nSynchronously write YAML to disk, creating any\nintermediary directories if they don't exist.\n\n### [.writeYAML](index.js#L488)\n\n* `dest` **{String}**    \n* `str` **{String}**    \n* `options` **{Options}**    \n\nAynchronously write YAML to disk, creating any\nintermediary directories if they don't exist.\n\n### [.writeDataSync](index.js#L513)\n\nSynchronously write JSON or YAML to disk, creating any intermediary directories if they don't exist. Data type is determined by the `dest` file extension.\n\n* `dest` **{String}**    \n* `str` **{String}**    \n* `options` **{Options}**    \n\n```js\nwriteDataSync('foo.yml', {foo: \"bar\"});\n```\n\n### [.writeData](index.js#L549)\n\nAsynchronously write JSON or YAML to disk, creating any intermediary directories if they don't exist. Data type is determined by the `dest` file extension.\n\n* `dest` **{String}**    \n* `str` **{String}**    \n* `options` **{Options}**    \n\n```js\nwriteDataSync('foo.yml', {foo: \"bar\"});\n```\n\n### [.copyFileSync](index.js#L582)\n\n* `src` **{String}**    \n* `dest` **{String}**    \n\nCopy files synchronously;\n\n### [.rmdir](index.js#L595)\n\n* `dir` **{String}**    \n* **{Function}**: `cb    \n* `returns`: {Function}  \n\nAsynchronously remove dirs and child dirs that exist.\n\n### [.ext](index.js#L702)\n\n* `filepath` **{String}**    \n* `returns`: {String}  \n\nReturn the file extension.\n\n### [.dirname](index.js#L714)\n\n* `filepath` **{String}**    \n* `returns`: {String}  \n\nDirectory path excluding filename.\n\n### [.last](index.js#L740)\n\n* `filepath` **{String}**    \n* `returns`: {String}  \n\nThe last `n` segments of a filepath. If a number\nisn't passed for `n`, the last segment is returned.\n\n### [.first](index.js#L755)\n\n* `filepath` **{String}**    \n* `returns`: {String}  \n\nThe first `n` segments of a filepath. If a number\nisn't passed for `n`, the first segment is returned.\n\n### [.lastChar](index.js#L774)\n\nReturns the last character in `filepath`\n\n* `filepath` **{String}**    \n* `returns`: {String}  \n\n```\nlastChar('foo/bar/baz/');\n//=> '/'\n```\n\n### [.addSlash](index.js#L801)\n\nAdd a trailing slash to the filepath.\n\n* `filepath` **{String}**    \n* `returns`: {String}  \n\nNote, this does _not_ consult the file system\nto check if the filepath is file or a directory.\n\n### [.normalizePath](index.js#L816)\n\n* `filepath` **{String}**    \n* `returns`: {String}  \n\nNormalize a filepath and remove trailing slashes.\n\n### [.relative](index.js#L842)\n\n* `filepath` **{String}**    \n* `returns`: {String}  \n\nResolve the relative path from `a` to `b.\n\n### [.isAbsolute](index.js#L854)\n\n* **{[type]}**: filepath    \n* `returns`: {Boolean}  \n\nReturn `true` if the path is absolute.\n\n### [.equivalent](index.js#L868)\n\n* `filepath` **{String}**    \n* `a` **{String}**    \n* `b` **{String}**    \n* `returns`: {Boolean}  \n\nReturn `true` if path `a` is the same as path `b.\n\n### [.doesPathContain](index.js#L883)\n\nTrue if descendant path(s) contained within ancestor path. Note: does not test if paths actually exist.\n\n* `ancestor` **{String}**: The starting path.    \n* `returns`: {Boolean}  \n\nSourced from [Grunt].\n\n### [.isPathCwd](index.js#L912)\n\nTrue if a filepath is the CWD.\n\n* `filepath` **{String}**    \n* `returns`: {Boolean}  \n\nSourced from [Grunt].\n\n### [.isPathInCwd](index.js#L929)\n\n* `filepath` **{String}**    \n* `returns`: {Boolean}  \n\nTrue if a filepath is contained within the CWD.\n\n## Author\n\n**Jon Schlinkert**\n \n+ [github/assemble](https://github.com/assemble)\n+ [twitter/assemble](http://twitter.com/assemble) \n\n## License\nCopyright (c) 2014 Jon Schlinkert, contributors.  \nReleased under the MIT license\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on October 06, 2014._\n\n[globby]: //github.com/sindresorhus/globby",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/assemble/fs-utils.git"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "version": "0.5.0"
}
