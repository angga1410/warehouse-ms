{
  "_args": [
    [
      {
        "raw": "gray-matter@https://registry.npmjs.org/gray-matter/-/gray-matter-0.5.3.tgz",
        "scope": null,
        "escapedName": "gray-matter",
        "name": "gray-matter",
        "rawSpec": "https://registry.npmjs.org/gray-matter/-/gray-matter-0.5.3.tgz",
        "spec": "https://registry.npmjs.org/gray-matter/-/gray-matter-0.5.3.tgz",
        "type": "remote"
      },
      "F:\\All Projects\\new projects\\warehouse\\node_modules\\ajax-bootstrap-select"
    ]
  ],
  "_from": "gray-matter@https://registry.npmjs.org/gray-matter/-/gray-matter-0.5.3.tgz",
  "_id": "gray-matter@0.5.3",
  "_inCache": true,
  "_location": "/ajax-bootstrap-select/marked-toc/gray-matter",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gray-matter@https://registry.npmjs.org/gray-matter/-/gray-matter-0.5.3.tgz",
    "scope": null,
    "escapedName": "gray-matter",
    "name": "gray-matter",
    "rawSpec": "https://registry.npmjs.org/gray-matter/-/gray-matter-0.5.3.tgz",
    "spec": "https://registry.npmjs.org/gray-matter/-/gray-matter-0.5.3.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/ajax-bootstrap-select/marked-toc"
  ],
  "_resolved": "https://registry.npmjs.org/gray-matter/-/gray-matter-0.5.3.tgz",
  "_shasum": "7655233bbf6ff667164e4f657a2e64dea0d9ad3b",
  "_shrinkwrap": null,
  "_spec": "gray-matter@https://registry.npmjs.org/gray-matter/-/gray-matter-0.5.3.tgz",
  "_where": "F:\\All Projects\\new projects\\warehouse\\node_modules\\ajax-bootstrap-select",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "bugs": {
    "url": "https://github.com/assemble/gray-matter/issues"
  },
  "dependencies": {
    "coffee-script": "^1.8.0",
    "delims": "^0.4.0",
    "js-yaml": "^3.2.2",
    "lodash": "^2.4.1",
    "mixin-deep": "^0.1.0",
    "toml": "^2.0.6",
    "verbalize": "^0.1.2"
  },
  "description": "A simple to use and extend front matter library. Supports parsing and extracting YAML, JSON, TOML or Coffee Front-Matter, with options to set custom delimiters.",
  "devDependencies": {
    "mocha": "^1.19.0",
    "should": "^4.0.4",
    "verb": "^0.2.15",
    "verb-tag-jscomments": "^0.2.2"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "homepage": "https://github.com/assemble/gray-matter#readme",
  "keywords": [
    "assemble",
    "JSON",
    "coffee",
    "coffee-script",
    "data",
    "docs",
    "documentation",
    "extract",
    "extracting",
    "front",
    "front-matter",
    "frontmatter",
    "generate",
    "generator",
    "javascript",
    "jekyll",
    "js",
    "markdown",
    "matter",
    "parse",
    "parser",
    "parsing",
    "template",
    "site",
    "static",
    "toml",
    "yaml",
    "yfm"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/assemble/gray-matter/blob/master/LICENSE-MIT"
    }
  ],
  "main": "index.js",
  "name": "gray-matter",
  "optionalDependencies": {},
  "readme": "# gray-matter [![NPM version](https://badge.fury.io/js/gray-matter.svg)](http://badge.fury.io/js/gray-matter)\n\n\n> A simple to use and extend front matter library. Supports parsing and extracting YAML, JSON, TOML or Coffee Front-Matter, with options to set custom delimiters.\n\nUsed by [assemble](https://github.com/assemble/assemble), [verb](https://github.com/assemble/verb), and thousands of other projects!\n\n**v0.5.0 has breaking changes!**\n\n* YAML is now parsed using the `.safeLoad()` method from [js-yaml](http://github.com/nodeca/js-yaml).\n* To parse coffee, CSON or javascript front matter, you must set `options.eval` to true.\n* `stringify()` has been renamed to `toJSON()`\n* `stringifyYAML()` has been renamed to `toYAML()`\n\n\n## Highlights\n\n* Reliable and battle-tested. \n* Will extract and parse:\n  * [YAML](http://github.com/nodeca/js-yaml)\n  * [JSON](http://en.wikipedia.org/wiki/Json)\n  * [TOML](http://github.com/mojombo/toml)\n  * [CoffeeScript](http://coffeescript.org) when `options.eval` is set to `true`\n  * [CSON](https://github.com/bevry/cson) when `options.eval` is set to `true`\n  * JavaScript: when `options.eval` is set to `true`\n* Easy to add additional parsers! pull requests welcome!\n\n#### TOC\n\n\n<!-- toc -->\n\n* [Highlights](#highlights)\n* [Install](#install)\n* [Usage](#usage)\n* [API](#api)\n  * [[matter](index.js#L48)](#matterindexjsl48)\n  * [[.read](index.js#L115)](#readindexjsl115)\n  * [[.exists](index.js#L136)](#existsindexjsl136)\n  * [[.extend](index.js#L156)](#extendindexjsl156)\n  * [[.reconstruct](index.js#L181)](#reconstructindexjsl181)\n  * [[.toJSON](index.js#L196)](#tojsonindexjsl196)\n  * [[.toYAML](index.js#L209)](#toyamlindexjsl209)\n* [Options](#options)\n  * [options.eval](#optionseval)\n  * [options.lang](#optionslang)\n  * [options.delims](#optionsdelims)\n  * [options.autodetect](#optionsautodetect)\n* [Examples](#examples)\n  * [.extend](#extend)\n* [Why?](#why)\n* [Authors](#authors)\n* [License](#license)\n\n<!-- toc stop -->\n\n\n## Install\n#### Install with [npm](npmjs.org)\n\n```bash\nnpm i gray-matter --save\n```\n#### Install with [bower](https://github.com/bower/bower)\n\n```bash\nbower install gray-matter --save\n```\n\n## Usage\n\n```js\nvar matter = require('gray-matter');\nconsole.log(matter('---\\ntitle: foo\\n---\\nbar');\n//=> {data: {title: 'foo'}, content: 'bar', orig: '---\\ntitle: foo\\n---\\nbar'}\n```\n\n## API\n### [matter](index.js#L48)\n\nExpects a string and returns and object:\n\n* `str` **{String}**: The string to parse    \n* `options` **{Object}**: Object of options    \n* `returns` **{Object}** `file`: Object with the following properties.  \n\n```js\nmatter('---\\ntitle: Blog\\n---\\nThis is content.');\n```\n\nReturns:\n\n```json\n{\n  \"data\": {\"title\": \"Blog\"},\n  \"content\": \"This is content.\",\n  \"original\": \"---\\ntitle: Blog\\n---\\nThis is content.\"\n}\n```\n\n### [.read](index.js#L115)\n\nRead a file then pass the string and `options` to `matter()` for parsing:\n\n* `filepath` **{String}**    \n* `options` **{Object}**    \n* `returns` **{Object}** `file`: Same object as `matter()`, with an additional `path` property  \n\n```js\nmatter.read('file.md');\n```\n\nReturns something like:\n\n```json\n{\n  \"data\": {\"title\": \"Blog\"},\n  \"content\": \"This is content.\",\n  \"original\": \"---\\ntitle: Blog\\n---\\nThis is content.\"\n}\n```\n\n### [.exists](index.js#L136)\n\nReturn `true` if front-matter exists.\n\n* `str` **{String}**: The string to parse    \n* `options` **{Object}**: Options to pass to `matter()`    \n* `returns` **{Boolean}** `true`: or `false`  \n\n```js\nmatter.exists(str);\n```\n\n### [.extend](index.js#L156)\n\nExtend and stringify **YAML** front matter. Takes an object as the second parameter, and returns either the extended, stringified object (YAML), or if no front matter is found an empty string is returned.\n\n* `str` **{String}**: The string to parse    \n* `obj` **{Object}**: The object to use to extend the front matter.    \n* `returns` **{String}**: String with extended YAML front matter.  \n\n```js\nmatter.extend(str, obj);\n```\n\n### [.reconstruct](index.js#L181)\n\nA convenience wrapper around the `matter()` and `matter.extend()` methods.\n\n* `str` **{String}**: The string to parse    \n* `obj` **{Object}**: The object to use to extend the front matter.    \n* `returns` **{String}**: Original string with extended front matter.  \n\nExtends YAML front matter, then re-assembles front matter with\nthe content of the file.\n\n```js\nmatter.reconstruct(str, obj);\n```\n\n### [.toJSON](index.js#L196)\n\n* `str` **{String}**    \n* `options` **{Object}**    \n* `returns` **{Object}**: Parsed front matter as JSON.  \n\nConvenience wrapper around the `matter(str).data()` method.\n\n### [.toYAML](index.js#L209)\n\n* `str` **{String}**    \n* `options` **{Object}**    \n* `returns` **{String}**: Stringified YAML.  \n\nStringify parsed front matter back to YAML.\n\n## Options\n> All methods will accept an options object to be passed as a second parameter\n\n### options.eval\nType: `Boolean`\n\nDefault: `false`\n\nEvaluate coffee-script, CSON or JavaScript in front-matter. If you aren't aware of the dangers, google is your friend.\n\n### options.lang\nType: `String`\n\nDefault: `yaml`\n\nThe parser to use on the extracted front matter. Valid options include:\n\n* `yaml`\n* `json`\n* `coffee` \n* `cson` \n* `toml` \n* `js`|`javascript`\n\n### options.delims\nType: `Object`\n\nDefault: `{delims: ['---', '---']}`\n\nOpen and close delimiters can be passed in as an array of strings. Example:\n\n```js\nmatter.read('file.md', {delims: ['~~~', '~~~']});\n```\n\nYou may also pass an array of arrays, allowing multiple alternate delimiters to be used. Example:\n\n\n```js\n{\n  delims: [\n    ['---', '~~~'], ['---', '~~~']\n  ]\n}\n```\n_Note that passing multiple delimiters will yield unpredictable results, it is recommended that you use this option only for testing purposes._\n\n\n### options.autodetect\nType: `Boolean`\n\nDefault: `undefined`\n\nAttempts to automatically register a language that is specified after the first code boundary (delimiter).\n\nUsage Example:\n\n```coffee\n--- coffee\nuser = 'jonschlinkert'\nreverse = (src) ->\n  src.split('').reverse().join('')\n---\n\n{%= user %}\n{%= reverse(user) %}\n```\n\n\n## Examples\n\nLet's say our page, `foo.html` contains\n\n```html\n---\ntitle: YAML Front matter\ndescription: This is a page\n---\n<h1>{{title}}</h1>\n```\n\nthen running the following in the command line:\n\n```js\nconsole.log(matter('foo.html'));\n```\nreturns\n\n```json\n{\n  \"data\": {\n    \"title\": \"YAML Front matter\",\n    \"description\": \"This is a page\"\n  },\n  \"content\": \"<h1>{{title}}</h1>\",\n  \"original\": \"---\\ntitle: YAML Front matter\\n---\\n<h1>{{title}}</h1>\"\n}\n```\nand\n\n```js\nconsole.log(matter('foo.html').data);\n```\nreturns\n\n\n```json\n{\"title\": \"YAML Front matter\", \"description\": \"This is a page\"}\n```\n\n### .extend\n\nGiven this page:\n\n```html\n---\ntitle: Gray Matter\n---\nHooray!\n```\nand this config:\n\n```js\nvar file = require('fs').readFileSync('file.md', 'utf8');\nvar obj = {\n  description: 'A simple to use front matter lib';\n};\nmatter.extend(file, obj);\n```\n\nthe result would be:\n\n```html\n---\ntitle: Gray Matter\ndescription: A simple to use front matter lib\n---\nHooray!\n```\n\n\n## Why?\n> Why another YAML Front Matter library?\n\nBecause other libraries we tried failed to meet our requirements with [Assemble](http://assemble.io). Some most of the libraries met most of the requirements, but _none had all of them_. Here are the most important:\n\n* Be usable, if not simple\n* Allow custom delimiters\n* Use a dependable and well-supported library for parsing YAML and other languages\n* Don't fail when no content exists\n* Don't fail when no front matter exists\n* Have no problem reading YAML files directly\n* Have no problem with complex content, including fenced code blocks that contain examples of YAML front matter. Other parsers fail on this.\n* Should return an object that contains the parsed YAML front matter and content, as well as the \"original\" content.\n\n\n\n## Authors\n\n**Jon Schlinkert**\n \n+ [github/assemble](https://github.com/assemble)\n+ [twitter/assemble](http://twitter.com/assemble) \n\n## License\nCopyright (c) 2014 Jon Schlinkert, contributors.  \nReleased under the MIT license\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on October 24, 2014._\n\n\n[js-yaml]: https://github.com/nodeca/js-yaml\n[coffee-script]: https://github.com/jashkenas/coffeescript\n[toml-node]: https://github.com/BinaryMuse/toml-node\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/assemble/gray-matter.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.5.3"
}
